import streamlit as st
import cv2
import numpy as np
import insightface
from insightface.app import FaceAnalysis
import faiss
import os
import pickle
from collections import Counter

MODEL_NAME = 'buffalo_l'
DB_INDEX_FILE = 'face_index.faiss'
LABELS_FILE = 'labels.pkl'
EMBEDDING_SIZE = 512
MAX_FACES = 4

@st.cache_resource
def load_model():
    app = FaceAnalysis(name=MODEL_NAME)
    app.prepare(ctx_id=0, det_size=(640, 640))
    return app

face_app = load_model()

if os.path.exists(DB_INDEX_FILE):
    face_index = faiss.read_index(DB_INDEX_FILE)
    with open(LABELS_FILE, 'rb') as f:
        face_labels = pickle.load(f)
else:
    face_index = faiss.IndexFlatL2(EMBEDDING_SIZE)
    face_labels = []

def process_image(img):
    img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    faces = face_app.get(img_rgb)
    
    if len(faces) == 0:
        return None, "–õ–∏—Ü–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã"
    
    if len(faces) > MAX_FACES:
        return None, f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ª–∏—Ü –Ω–∞ —Ñ–æ—Ç–æ ({len(faces)}). –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ: {MAX_FACES}."
    
    main_face = sorted(faces, key=lambda x: (x.bbox[2]-x.bbox[0])*(x.bbox[3]-x.bbox[1]), reverse=True)[0]
    return main_face.normed_embedding, None

def show_database_stats():
    if face_labels:
        st.sidebar.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        counter = Counter(face_labels)
        for name, count in counter.items():
            st.sidebar.info(f"{name}: {count} {'–ª–∏—Ü–æ' if count == 1 else '–ª–∏—Ü–∞'}")
        st.sidebar.write(f"–í—Å–µ–≥–æ –ª–∏—Ü: {len(face_labels)}")

st.title("üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ª–∏—Ü")

show_database_stats()

st.subheader("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –ª–∏—Ü–æ –≤ –±–∞–∑—É")
with st.expander("–§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è", expanded=True):
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ —á–µ–ª–æ–≤–µ–∫–∞", type=['jpg', 'png', 'jpeg'], key="add")
    person_name = st.text_input("–ö—Ç–æ —ç—Ç–æ –Ω–∞ —Ñ–æ—Ç–æ? (–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—è –º–∞–º–∞)", key="name")

    if uploaded_file is not None and person_name:
        file_bytes = np.asarray(bytearray(uploaded_file.read()), dtype=np.uint8)
        image = cv2.imdecode(file_bytes, cv2.IMREAD_COLOR)
        
        st.image(image, channels="BGR", caption="–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", width=300)
        
        embedding, error = process_image(image)
        
        if error:
            st.error(error)
        else:
            if face_labels:
                distances, _ = face_index.search(np.array([embedding]), 1)
                if distances[0][0] < 0.5:
                    st.warning("‚ö†Ô∏è –≠—Ç–æ –ª–∏—Ü–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
            
            if st.button("–î–æ–±–∞–≤–∏—Ç—å –≤ –±–∞–∑—É"):
                face_index.add(np.array([embedding]))
                face_labels.append(person_name)
                
                faiss.write_index(face_index, DB_INDEX_FILE)
                with open(LABELS_FILE, 'wb') as f:
                    pickle.dump(face_labels, f)
                
                st.success(f"‚úÖ –õ–∏—Ü–æ '{person_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É!")
                st.balloons()
                show_database_stats()

st.subheader("üîç –ü–æ–∏—Å–∫ –ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
with st.expander("–§–æ—Ä–º–∞ –ø–æ–∏—Å–∫–∞", expanded=True):
    search_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–∏—Å–∫–∞", type=['jpg', 'png', 'jpeg'], key="search")

    if search_file:
        file_bytes = np.asarray(bytearray(search_file.read()), dtype=np.uint8)
        search_image = cv2.imdecode(file_bytes, cv2.IMREAD_COLOR)
        
        st.image(search_image, channels="BGR", caption="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞", width=300)
        
        embedding, error = process_image(search_image)
        
        if error:
            st.error(error)
        else:
            distances, indices = face_index.search(np.array([embedding]), 3)
            
            found = False
            for i in range(len(distances[0])):
                if distances[0][i] < 0.6:
                    match = face_labels[indices[0][i]]
                    confidence = max(0, 100 - distances[0][i] * 100)
                    st.success(f"**–ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ:** {match} (–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.1f}%)")
                    found = True
                    break
            
            if not found:
                st.warning("‚ùå –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –≤ –±–∞–∑–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                
            if found and face_labels:
                st.subheader("–¢–æ–ø-3 –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è:")
                cols = st.columns(3)
                for i, col in enumerate(cols):
                    if i < len(distances[0]):
                        idx = indices[0][i]
                        col.metric(label=face_labels[idx], value=f"{max(0, 100 - distances[0][i] * 100):.1f}%")
                        col.progress(min(100, int(100 - distances[0][i] * 100)))
